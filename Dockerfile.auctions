# Stage 1: Build
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-env
WORKDIR /

# Install global tools and trust HTTPS development certificates
RUN dotnet tool install --global dotnet-certificate-tool
RUN dotnet dev-certs https --trust

# Copy solution and restore dependencies
COPY CarBidSystem.sln ../
COPY src/AuctionService/CarBidSystem.Auctions.Service/ ./src/AuctionService/CarBidSystem.Auctions.Service/
COPY src/AuctionService/CarBidSystem.Auctions.UseCases/ ./src/AuctionService/CarBidSystem.Auctions.UseCases/
COPY src/AuctionService/CarBidSystem.Auctions.CoreBusiness/ ./src/AuctionService/CarBidSystem.Auctions.CoreBusiness/
COPY src/Common/CarBidSystem.Common/ ./src/Common/CarBidSystem.Common/
COPY src/AuctionService/Plugins/CarBidSystem.Auctions.Plugins.EFCoreSqlServer/ ./src/AuctionService/Plugins/CarBidSystem.Auctions.Plugins.EFCoreSqlServer/
COPY src/AuctionService/Plugins/CarBidSystem.Auctions.Plugins.RedisCaching/ ./src/AuctionService/Plugins/CarBidSystem.Auctions.Plugins.RedisCaching/
COPY src/AuctionService/Plugins/CarBidSystem.Auctions.Plugins.InMemory/ ./src/AuctionService/Plugins/CarBidSystem.Auctions.Plugins.InMemory/

RUN dotnet restore ./src/AuctionService/CarBidSystem.Auctions.Service/CarBidSystem.Auctions.Service.csproj

# Build and publish the application
RUN dotnet publish ./src/AuctionService/CarBidSystem.Auctions.Service/CarBidSystem.Auctions.Service.csproj -c Release -o app/publish

# Stage 2: Runtime
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
WORKDIR /publish
COPY --from=build-env /app/publish .

# Set environment variables and expose ports
ENV ASPNETCORE_URLS=http://+:80;https://+:443
EXPOSE 80/tcp
EXPOSE 443/tcp

# Start the service
ENTRYPOINT ["dotnet", "CarBidSystem.Auctions.Service.dll", "--server.urls", "http://*:80;https://*:443"]


